libDAI-0.2.4 (2010-02-11)
-------------------------

New features:
* Implemented Tree-Reweighted BP
* [Frederik Eaton] Implemented Fractional Belief Propagation

Miscellaneous improvements:
* Improved documentation
* [Frederik Eaton] Added constructors for BBPCostFunction
* [Frederik Eaton] Added accessor/mutator for the elements of a SmallSet<>
* [Frederik Eaton] Added unary minus to TProb<>
* [Frederik Eaton] Added Hellinger distance to TProb<>::DistType
* [Frederik Eaton] Two small patches for src/jtree.cpp and utils/createfg.cpp
* tests/testdai option "marginals" now has three possible values: NONE
  outputs no marginals, VAR only variable marginals, and ALL outputs all
  marginals calculated by the algorithm.
* Strengthened convergence criteria of various algorithms
* Added GraphAL, an adjacency list implementation for graphs,
  similar to (but simpler than) BipartiteGraph
* Added some functionality to create various standard factors
  (the functions whose names start with "createFactor")
* Added examples example_sprinkler_gibbs and example_sprinkler_em
* Implemented various heuristics for choosing a variable elimination sequence 
  in JTree
* Added BETHE method for GBP/HAK cluster choice

Build system:
* Moved platform independent build options into Makefile.ALL
* Windows platform now needs Boost 1.37 or higher

Code cleanup:
* Cleaned up utils/createfg and tests/testdai

Interface changes (the old interface is marked obsolete and will be removed in the next release):
* Removed obsolete/deprecated stuff
* Renamed Graph into GraphEL (for Graph, implemented as Edge List)
* Renamed some functions of BipartiteGraph:
    add1() -> addNode1()
    erase1() -> eraseNode1()
    nr1() -> nrNodes1()
    add2() -> addNode2()
    erase2() -> eraseNode2()
    nr2() -> nrNodes2()
* Renamed some functions in ClusterGraph:
    ClusterGraph::eliminationCost() -> ::eliminationCost_MinFill() 
    ClusterGraph::VarElim() -> ClusterGraph::VarElim( sequentialVariableElimination( ElimSeq ) ) 
    ClusterGraph::VarElim_MinFill() -> ClusterGraph::VarElim( greedyVariableElimination( eliminationCost_MinFill ) )
* Changed interface of one RegionGraph constructor
* Renamed "Clamped BP" into "Conditioned BP"

Bug fixes:
* Fixed regression in scripts/regenerate-properties (now all errors are 
  gathered before throwing the exception, as used to be the case)
* Fixed FTBFS errors on MACOSX (thanks to Sebastian Riedel for reporting this bug)
* [Alexander Schwing] Fixed error in BP that occured with damping
  and using log-domain updates
* Fixed bug in HAK for trivial region graphs (with only one outer region
  and no inner regions), reported by Alejandro Lage.


libDAI-0.2.3 (2009-11-16)
-------------------------

New features:
* Complete doxygen documentation (although more detailed documentation still
  has to be written)
* [Charles Vaske] Added parameter learning for conditional probabilities by 
  Expectation Maximization
* [Patrick Pletscher] Added SWIG wrapper code for experimental python and 
  octave interfaces
* Added Max-Product functionality to JTree
* [Frederik Eaton] Added Back-Belief-Propagation
* [Frederik Eaton] Added approximate inference method "Clamped Belief Propagation"
* [Frederik Eaton] Added approximate inference method "Gibbs sampling"

Code cleanup:
* Updated copyright headers
* Cleaned up error handling by introducing the DAI_THROWE macro
* Introduced DAI_DEBASSERT macro to abbreviate a common pattern
* Replaced the standard assert() macro by DAI_ASSERT, which throws a
  dai::Exception and is even active if NDEBUG is defined
* Removed all the virtual default constructors *::create(), as they are not used
* [Frederik Eaton] Removed unnecessary copy constructors and assignment operators
* [Frederik Eaton] Change cout to cerr in warnings and error messages

Miscellaneous improvements:
* BipartiteGraph:
  - Added eraseEdge( size_t n1, size_t n2 )
  - [Frederik Eaton] Improved documentation of Neighbor
* TProb<T>:
  - Added divided_by(const TProb<T>&) const
  - Added constructor TProb<T>( const std::vector<S> &v )
  - Added size_t draw(), which draws a random index
  - [Frederik Eaton] Added setUniform()
  - [Frederik Eaton] Added sumAbs()
  - [Frederik Eaton] Added argmax()
  - [Giuseppe Passino] Added begin(), end()
* TFactor<T>:
  - [Giuseppe Passino] Added begin(), end()
  - [Charles Vaske] Added TFactor( const std::vector<Var> &vars, const std::vector<T> &p ),
    which reorders variables to canonical ordering before storing the table
  - Added constructor TFactor<T>( const VarSet &vars, const std::vector<S> &v )
  - Extended functionality of TFactor<T>::operators +,-,+=,-= to handle different VarSets
  - Added TFactor<T>::maxMarginal (similar to marginal but with max instead of sum)
* State:
  - [Giuseppe Passino] Added prefix ++ operator
* Permute:
  - [Charles Vaske] Added constructor in Permute for canonical variable ordering
* FactorGraph:
  - [Frederik Eaton] Added clampVar()
  - [Frederik Eaton] Added clampFactor()
  - [Giuseppe Passino] Added begin(), end()
* PropertySet:
  - Added keys(), for getting all keys
  - [Frederik Eaton] Added default constructor
  - [Frederik Eaton] Added constructor from string
* InfAlg:
  - Added setProperties(), getProperties() and printProperties()
  - [Frederik Eaton] Added beliefV(), beliefF()
* ExactInf:
  - Added calcMarginal(const VarSet &)
* HAK:
  - Added "init" parameter to allow for random initialization
* BP:
  - [Giuseppe Passino] Added findMaximum(), which can be used after running
    max-product BP to construct a global state with maximum probability
* JTree:
  - Added findMaximum(), which can be used after running
    max-product JTree to construct a global state with maximum probability
* MatLab interface:
  - MEX file dai now also returns variable and factor beliefs
  - [Sebastian Nowozin] MEX file dai now also optionally returns the MAP state
    (only for BP and JTree)
* README is now created automatically from doxygen documentation
* [Frederik Eaton] Added script for automatically generating properties code (used by CBP and BBP)
* [Frederik Eaton] Added newInfAlgFromString to alldai.h/cpp
* [Frederik Eaton] Added some utility macros (DAI_PV, DAI_DMSG, DAI_IFVERB)
  and functions (concat(),rnd()) to util.h
* Changed output stream operator<< for Var and VarSet
* [Frederik Eaton] Improved parsing code in tests/testdai to allow recursive
  alias substitutions
* [Frederik Eaton] Added useful aliases to aliases.conf
* [Giuseppe Passino] Optimised maximum-residual BP by using a reversed ordered
  set instead of the linear search (which can yield enormous speedups - a
  factor 500 has been measured on a binary Ising grid with 128x128 variables!)
* Added debug assertions to Var which check for inconsistent dimensions of
  variables with the same labels
* toc() now returns POSIX system time with maximum accuracy of microseconds
* Exception objects now remember their error code
* Examples:
  - Moved example.cpp to examples/
  - Added examples/example_bipgraph.cpp
  - Added examples/example_varset.cpp
  - Added examples/example_sprinkler.cpp
  - Added examples/example_permute.cpp
  - Added python and octave ports for examples/example_sprinkler.cpp

Build system:
* Improved Makefile:
  - Merged Makefile.win and Makefile.shared into Makefile
  - Macros DAI_VERSION and DAI_DATE have been introduced,
    in order to store this information in a central place
  - Introduced CCNODEBUGFLAGS in Makefile
  - Switched Makefile.win to GNU Make syntax
  - [Frederik Eaton] Added TAGS, lib targets to Makefile
* Compatibility:
  - [Peter Gober] libDAI can now be built on Cygwin
  - [Dan Preston] libDAI can now be built on Mac OS X
  - Changed regression test so that it also works under Windows

Interface changes (the old interface is marked obsolete and will be removed in the next release):
* Var:
  - Variable labels are now nonnegative (of type size_t)
* VarSet:
  - Replaced calcState() by non-member calcLinearState()
  - Replaced calcStates() by non-member calcState()
* Permute:
  - Renamed convert_linear_index into convertLinearIndex
* TProb<>:
  - Replaced log0() by log(true)
  - Replaced takeLog0() by takeLog(true)
  - Removed hasNonPositives()
  - Renamed minVal() to min()
  - Renamed maxVal() to max()
  - Renamed totalSum() to sum()
* TFactor<>:
  - Replaced log0() by TFactor<T>::log(true)
  - Removed divided_by, use operator/ instead
  - Removed divide, use operator/= instead
  - Removed partSum(const VarSet&), use marginal(const VarSet&,false) instead
  - Renamed minVal() to min()
  - Renamed maxVal() to max()
  - Renamed totalSum() to sum()
* FactorGraph:
  - Changed clamp and clamp interfaces (the variable to be
    clamped is now indicated by its index, not as a Var)
* RegionGraph:
  - Renamed Check_Counting_Numbers into checkCountingNumbers
  - Renamed Calc_Counting_Numbers into calcCountingNumbers
* Miscellaneous:
  - Renamed Treewidth(const FactorGraph &) into boundTreewidth(const FactorGraph &)
  - Replaced UEdgeVec by Graph
  - Replaced DEdgeVec by new RootedTree class
  - Moved functionality of GrowRootedTree() into constructor of RootedTree
  - Merged calcPairBeliefsNew() into calcPairBeliefs()
  - Removed calcMarginal2ndO()
  - Renamed smallSet<T> to SmallSet<T>
  - Removed class Diffs
  - [Frederik Eaton] Added backwards compatibility layer for edge interface to
    BipartiteGraph and FactorGraph (which will be obsoleted soon)

Bug fixes:
* Fixed reversal of min and max in 
  TFactor<T> min( const TFactor<T> &, const TFactor<T> & )
  TFactor<T> max( const TFactor<T> &, const TFactor<T> & )
* [Sebastian Nowozin] Fixed memory leak in MEX file dai
* [Frederik Eaton] In PropertySet::getStringAs(), check for typeid(ValueType) 
  before typeid(std::string) (this fixes a strange bug for empty string property)
* Added work-around for bug in Boost Graph Library
* Fixed bug in MaxSpanningTree (it wrongly assumed that the tree was not empty).
* Fixed bug in calcMarginal and calcPairBeliefs where states with zero probability 
  mass were clamped, leading to NaNs or assertion errors (thanks to Dan Preston 
  for reporting this)


libDAI-0.2.2 (2008-09-30)
-------------------------

New features:
* Approximate inference methods now report the number of iterations needed.
* Added damping to various algorithms to improve convergence properties.
* Added more features to utils/createfg for creating factor graphs.
* Added ExactInf class for brute force exact inference.
* [Giuseppe Pasino] Added "logdomain" property to BP, a boolean that controls
  whether calculations are done in the log-domain or in the linear domain;
  doing calculations in the log-domain may help if the numerical range
  of a double is too small.
* [Claudio Lima] Added Max-Product functionality to BP.
* Improved documentation.

Improved architecture:
* Added Exceptions framework.
* Pervasive change of BipartiteGraph implementation (based on an idea by
  Giuseppe Passino). BipartiteGraph no longer stores the node properties
  (former _V1 and _V2), nor does it store a dense adjacency matrix anymore,
  nor an edge list. Instead, it stores the graph structure as lists of
  neighboring nodes. This yields a significant memory/speed improvement for
  large factor graphs, and is more elegant as well. Iterating over neighbors is
  made easy by using boost::foreach.
* Added conditional compilation of inference methods.
* VarSet is now implemented using a std::vector<Var> instead of a
  std::set<Var>, which yields a significant speed improvement. Furthermore,
  the implementation has been generalized, resulting in the small_set<T> class
  which can be used to represent sets of small cardinality; VarSet is the
  specialization with T = Var.
* Improved ClusterGraph implementation, yielding significant speedups
  for the JunctionTree algorithm on large factorgraphs.

Code cleanup:
* Moved everything into namespace "dai".
* Renamed DEBUG to DAI_DEBUG to avoid conflicts.
* Replaced ENUM2,ENUM3,ENUM4,ENUM5,ENUM6 by single DAI_ENUM macro.
* Removed utils/remove_short_loops and matlab/remove_short_loops.
* Replaced sub_nb class in mr.h by boost::dynamic_bitset.
* Improved index.h:
  - Renamed Index -> IndexFor
  - Added some .reserve()'s to IndexFor methods which yields a
    25% speedup of testregression
  - Replaced multind by Permute
  - Added MultiFor
  - Added State
* New funcstionality of factor.h.
* Moved Properties and MaxDiff frameworks from InfAlg to each individual
  inference algorithm, because the Properties framework was not as
  convenient as I hoped, and not every inference algorithm needs a maxdiff
  variable. Also, replaced some FactorGraph functionality in InfAlg by a
  function that returns the FactorGraph. The result is cleaner (less
  entangled) code.
* Removed x2x.
* Replaced Complex with real numbers (negative potentials are just too rare
  to warrant the additional "complexity" :)).

Miscellaneous improvements:
* Now compiles also with MS Visual C++ (thanks to Jiuxiang Hu) and with
  GCC under cygwin.
* Contributions by Peter Gober:
  - Renamed variable _N in mr.* for compatibility with g++ under cygwin.
* Misc contributions by Giuseppe Passino:
  - removed "using namespace std;" from header files - bad practice;
  - moved header files in include/dai and sources in src;
  - changed #ifndefs to GNU style;
  - added extra warning checks (-W -Wextra) and fixed resulting warnings;
  - dai::TProb:
    o removed copy constructor and assignment operators (redundant);
    o implementation of some methods via STL algorithms;
    o added methods takeExp, takeLog, takeLog0 for transformation in-place;
    o explicit constructor (prevents implicit conversion from size_t to TProb);
    o added operator+,+=,-,-=, with argument T (for calculations in log-scale);
* Misc contributions by Christian Wojek:
  - New FactorGraph constructor that constructs from given ranges of factors
    and variables;
  - Optimization of FactorGraph constructors using tr1::unordered_map.
* FactorGraph constructors no longer check for short loops (huge speed
  increase for large factor graphs), nor for negative entries. Also, the
  normtype is now Prob::NORMPROB by default.
* Improved MaxSpanningTreePrims algorithm (uses boost::graph).

Interface changes:
* VarSet::
  - VarSet::stateSpace() -> nrStates(const VarSet &)
  - VarSet( const std::set<Var> ) -> VarSet( begin, end, sizeHint=0 )
  - VarSet( const std::vector<Var> ) -> VarSet( begin, end, sizeHint=0 )
  - removed bool operator||
  - operator&&(const VarSet&) -> intersects(const VarSet&)
  - operator&&(const Var&) -> contains(const Var&)
* FactorGraph::
  - delta(const Var &) -> delta(size_t)
  - Delta(const Var &) -> Delta(size_t)
  - makeCavity(const Var &) -> makeCavity(size_t)
  - vars() -> vars
  - factors() -> factors
  - removed MakeFactorCavity(size_t)
  - removed ExactMarginal(const VarSet &)
  - removed ExactlogZ()
  - removed updatedFactor(size_t)
  - removed _normtype and NormType()
  - removed hasShortLoops(...) and removeShortLoops(...)
  - WriteToDotFile(const char *filename) -> printDot( std::ostream& os )
  - undoProb(size_t) -> restoreFactor(size_t)
  - saveProb(size_t) -> backupFactor(size_t)
  - undoProbs(const VarSet &) -> restoreFactors(const VarSet &)
  - saveProbs(const VarSet &) -> backupFactors(const VarSet &)
  - ReadFromFile(const char*) returns void (throws on error)
  - WriteToFile(const char*) returns void (throws on error)
  - removed hasNegatives()
* RegionGraph::
  - nr_ORs() -> nrORs()
  - nr_IRs() -> nrIRs()
  - ORs() -> ORs
  - IRs() -> IRs
* *::Regenerate() -> *::construct()
* Renamed Index -> IndexFor
* Diffs:
  - max() -> maxDiff()
  - max_size() -> maxSize()
* Prob::max() -> Prob::maxVal()
* Factor::
  - max() -> maxVal()
  - part_sum() -> partSum()
* toc() in util.h now returns seconds as a double
* VarSet::operator&&
* Properties -> PropertySet


libDAI-0.2.1 (2008-05-26)
-------------------------

Bugfix release.
* added missing cstdio header in util.h
* fixed Properties in MR_CLAMPING_* and MR_EXACT_*
* added description of the factor graph fileformat
* improved Makefile


libDAI-0.2.0 (2006-11-30)
-------------------------

First public release.


0.1.5 (2006-11-30)
------------------

Regressions

- tests/testlcbp and tests/testlcbp are broken.
- EXACT method does not work anymore.
- The Properties framework gives a speed penalty because of the lookup
  costs involved; inner loops should be optimized.

General framework

- DAIAlg is now a template class; typedefs for DAIAlg<FactorGraph> and for
  DAIAlg<RegionGraph> are provided. In this way, we do not have to write "wrapper"
  functions to forward functionality from either FactorGraph or RegionGraph
  to DAIAlg. Functionality like clamping can be implemented in FactorGraph
  and in RegionGraph and no explicit interface is needed in descendants.
- New abstract base class InfAlg added, representing an inference algorithm,
  from which DAIAlg<T> inherits. This solves the incompatibility problems of
  DAIAlg<T> for different T (e.g. DAIAlg<FactorGraph> was incompatible with
  DAIAlg<RegionGraph>). More work is required to reduce code duplication
  (make FactorGraph part of InfAlg).
- Added generic interface (nrVars(), Vars(), nrFactors(), factor(size_t),
  beliefs(), belief(VarSet &), ...) to InfAlg and descendants.
- Added a saveProbs/undoProbs interface to InfAlg and descendants that enables
  one to save a few factors, modify them (e.g. clamp them), and then restore them
  to their old values. Undo should also init the corresponding messages / beliefs.
  This can be used if a given factor graph repeatedly needs to be clamped in
  different ways and an approximation method is run for each clamping; using the
  saveProbs/undoProbs can give a significant speed increase.
- Switched to a general Properties framework that handles the parameters of
  all inference methods in a uniform manner. The Properties class is a map of
  several properties in boost::any objects, indexed by their names (strings).
  It ca